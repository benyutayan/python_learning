

#output

a = 23
b= 45

print("a+b=",a+b)






#input

name = input("please input\n")
print("name = ",name)

####使用%
print("name = %s"  % name)

i = int(input("输入数字"))
print("i = %d" % i)

#float
f = float(input("输入数字"))
print("f = %f" % f)

#### format(), 墙裂推荐

#如果花括号里面没有序号，则按照出现的顺序进行替换
print('{} {}'.format('xyz',9) )     #xyz 9

#如果花括号里制定了使用参数的序号，则按照序号对应参数进行替换
print('{1} {0} {1} {0}'.format('xyz',9) )    #9 xyz 9 xyz

#使用关键字参数
print('{name} {age}'.format(name='xyz',age=9) )    #xyz 9


#如果需要输出花括号{}本身，可以采用 "{{" 表示 "{" ，用 "}}" 表示 "}"
print('{{ {} {} }}'.format('joe',100))    #{ joe 100 }


###加强格式化，
##1 精度

#保留到小数点后三位
print('{} {:.3f}'.format('xyz',9.121222) )  #xyz 9.121


#在{}中， : 后传入一个整数, 可以保证该域至少有这么多的宽度
print('{0:10} ==> {1:10d}'.format('xyz', 233))   #xyz        ==>        233

#格式化多个值的时候，可以传入一个字典, 然后使用方括号 '[]' 来访问键值
dict1 = {'name':8, 'age':9}
print('name = {0[name]:d} age = {0[age]:d}'.format(dict1) ) 
#在 table 变量前使用 '**' 来实现相同的功能。墙裂推荐
print('name = {name:s} age = {age:d}'.format(**dict1) )

#宽度
print('{0:20}'.format('00123')) 
#对齐,<，>，^表示左对齐，右对齐，居中对齐，默认使用左对齐
print("{0:<20}".format('00123'))   #00123
print("{0:>20}".format('00123'))   #               00123
print("{0:^20}".format('00123'))   #       00123
#填充
print("{0:#<20}".format('00123'))   #00123###############
print("{0:*>20}".format('00123'))   #***************00123
print("{0:(^20}".format('00123'))   #(((((((00123((((((((


#千位分隔符使用逗号(,)来表示
print('{0:-<20,}'.format(1234567890))

#精度,由小数点（.)开头。对于浮点数，精度表示小数部分输出的有效精度；对于字符串，精度表示输出的最大长度。
print('{0:.2f}'.format(11111112.345))
print('{0:.7}'.format('abcdefghijklmn'))

#类型
'''对于整数类型： b（输出整数对应的二进制），
              c（输出整数对应的Unicode字符），
              d（输出整数对应的十进制），
              o（输出整数对应的八进制），
              x（输出整数对应的小写十六进制），
              X（整数对应的大写十六进制）。

       对于浮点数     ：e(浮点数对应的小写e指数形式），
              E(浮点数对应的大写E指数形式），
              f(标准浮点格式），
              %（浮点数的百分数形式）
'''
print("{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(3),'\n')

print("{0:.2e},{0:.2E},{0:.2f},{0:.2%}".format(3.14152))
